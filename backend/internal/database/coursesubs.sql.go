// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: coursesubs.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createCourseSub = `-- name: CreateCourseSub :one
INSERT INTO coursesubs(id, student_id, course_id)
VALUES ($1, $2, $3)
RETURNING id, student_id, course_id
`

type CreateCourseSubParams struct {
	ID        uuid.UUID
	StudentID uuid.UUID
	CourseID  uuid.UUID
}

func (q *Queries) CreateCourseSub(ctx context.Context, arg CreateCourseSubParams) (Coursesub, error) {
	row := q.db.QueryRowContext(ctx, createCourseSub, arg.ID, arg.StudentID, arg.CourseID)
	var i Coursesub
	err := row.Scan(&i.ID, &i.StudentID, &i.CourseID)
	return i, err
}

const listCoursesSubs = `-- name: ListCoursesSubs :many
SELECT coursesubs.id, course.coursename from coursesubs left join course on coursesubs.course_id = course.id where student_id = $1
`

type ListCoursesSubsRow struct {
	ID         uuid.UUID
	Coursename sql.NullString
}

func (q *Queries) ListCoursesSubs(ctx context.Context, studentID uuid.UUID) ([]ListCoursesSubsRow, error) {
	rows, err := q.db.QueryContext(ctx, listCoursesSubs, studentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCoursesSubsRow
	for rows.Next() {
		var i ListCoursesSubsRow
		if err := rows.Scan(&i.ID, &i.Coursename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listStudents = `-- name: ListStudents :many
SELECT coursesubs.id, student.name from coursesubs left join student on coursesubs.student_id = student.id 
where course_id = $1
`

type ListStudentsRow struct {
	ID   uuid.UUID
	Name sql.NullString
}

func (q *Queries) ListStudents(ctx context.Context, courseID uuid.UUID) ([]ListStudentsRow, error) {
	rows, err := q.db.QueryContext(ctx, listStudents, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListStudentsRow
	for rows.Next() {
		var i ListStudentsRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
