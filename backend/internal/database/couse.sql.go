// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: couse.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const allCourseLang = `-- name: AllCourseLang :many
select course.langtaught, tutor.name, course.coursename, course.price as price, course.id
from course left join tutor on course.tutor_id = tutor.id
where  course.langtaught = $1 and price < $2
`

type AllCourseLangParams struct {
	Langtaught string
	Price      int32
}

type AllCourseLangRow struct {
	Langtaught string
	Name       sql.NullString
	Coursename sql.NullString
	Price      int32
	ID         uuid.UUID
}

func (q *Queries) AllCourseLang(ctx context.Context, arg AllCourseLangParams) ([]AllCourseLangRow, error) {
	rows, err := q.db.QueryContext(ctx, allCourseLang, arg.Langtaught, arg.Price)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllCourseLangRow
	for rows.Next() {
		var i AllCourseLangRow
		if err := rows.Scan(
			&i.Langtaught,
			&i.Name,
			&i.Coursename,
			&i.Price,
			&i.ID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const allcourseTutor = `-- name: AllcourseTutor :many
SELECT id, coursename from course where tutor_id = $1
`

type AllcourseTutorRow struct {
	ID         uuid.UUID
	Coursename sql.NullString
}

func (q *Queries) AllcourseTutor(ctx context.Context, tutorID uuid.UUID) ([]AllcourseTutorRow, error) {
	rows, err := q.db.QueryContext(ctx, allcourseTutor, tutorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []AllcourseTutorRow
	for rows.Next() {
		var i AllcourseTutorRow
		if err := rows.Scan(&i.ID, &i.Coursename); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createCourse = `-- name: CreateCourse :one
INSERT INTO course (id, langtaught, tutor_id, price, takenby, coursename)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, langtaught, tutor_id, takenby, price, coursename
`

type CreateCourseParams struct {
	ID         uuid.UUID
	Langtaught string
	TutorID    uuid.UUID
	Price      int32
	Takenby    int32
	Coursename sql.NullString
}

func (q *Queries) CreateCourse(ctx context.Context, arg CreateCourseParams) (Course, error) {
	row := q.db.QueryRowContext(ctx, createCourse,
		arg.ID,
		arg.Langtaught,
		arg.TutorID,
		arg.Price,
		arg.Takenby,
		arg.Coursename,
	)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Langtaught,
		&i.TutorID,
		&i.Takenby,
		&i.Price,
		&i.Coursename,
	)
	return i, err
}

const getCourse = `-- name: GetCourse :one
SELECT id, langtaught, tutor_id, takenby, price, coursename from course where id = $1
`

func (q *Queries) GetCourse(ctx context.Context, id uuid.UUID) (Course, error) {
	row := q.db.QueryRowContext(ctx, getCourse, id)
	var i Course
	err := row.Scan(
		&i.ID,
		&i.Langtaught,
		&i.TutorID,
		&i.Takenby,
		&i.Price,
		&i.Coursename,
	)
	return i, err
}
