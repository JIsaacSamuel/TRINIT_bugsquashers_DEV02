// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: flashcard.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createFlashCard = `-- name: CreateFlashCard :one
INSERT INTO flashcard (id, course_id, word, meaning)
VALUES ($1, $2, $3, $4)
RETURNING id, course_id, word, meaning
`

type CreateFlashCardParams struct {
	ID       uuid.UUID
	CourseID uuid.UUID
	Word     string
	Meaning  string
}

func (q *Queries) CreateFlashCard(ctx context.Context, arg CreateFlashCardParams) (Flashcard, error) {
	row := q.db.QueryRowContext(ctx, createFlashCard,
		arg.ID,
		arg.CourseID,
		arg.Word,
		arg.Meaning,
	)
	var i Flashcard
	err := row.Scan(
		&i.ID,
		&i.CourseID,
		&i.Word,
		&i.Meaning,
	)
	return i, err
}

const viewFlashCard = `-- name: ViewFlashCard :many
SELECT word, meaning from flashcard where course_id = $1
`

type ViewFlashCardRow struct {
	Word    string
	Meaning string
}

func (q *Queries) ViewFlashCard(ctx context.Context, courseID uuid.UUID) ([]ViewFlashCardRow, error) {
	rows, err := q.db.QueryContext(ctx, viewFlashCard, courseID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ViewFlashCardRow
	for rows.Next() {
		var i ViewFlashCardRow
		if err := rows.Scan(&i.Word, &i.Meaning); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
