// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: tutor.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createTutor = `-- name: CreateTutor :one
INSERT INTO tutor (id, name, emailID, created_at, passcode)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, name, emailid, created_at, passcode
`

type CreateTutorParams struct {
	ID        uuid.UUID
	Name      string
	Emailid   string
	CreatedAt time.Time
	Passcode  string
}

func (q *Queries) CreateTutor(ctx context.Context, arg CreateTutorParams) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, createTutor,
		arg.ID,
		arg.Name,
		arg.Emailid,
		arg.CreatedAt,
		arg.Passcode,
	)
	var i Tutor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emailid,
		&i.CreatedAt,
		&i.Passcode,
	)
	return i, err
}

const getTutorCred = `-- name: GetTutorCred :one
SELECT id, name, emailid, created_at, passcode from tutor where id = $1
`

func (q *Queries) GetTutorCred(ctx context.Context, id uuid.UUID) (Tutor, error) {
	row := q.db.QueryRowContext(ctx, getTutorCred, id)
	var i Tutor
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Emailid,
		&i.CreatedAt,
		&i.Passcode,
	)
	return i, err
}

const getTutorPass = `-- name: GetTutorPass :one
SELECT id, passcode from tutor where emailID = $1
`

type GetTutorPassRow struct {
	ID       uuid.UUID
	Passcode string
}

func (q *Queries) GetTutorPass(ctx context.Context, emailid string) (GetTutorPassRow, error) {
	row := q.db.QueryRowContext(ctx, getTutorPass, emailid)
	var i GetTutorPassRow
	err := row.Scan(&i.ID, &i.Passcode)
	return i, err
}
